/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "controlador.v:1" *)
module controlador_estacionamiento(clk, rst, sensor_vehicule, sensor_moved_vehicule, password_input, open_gate, close_gate, alarm_wrong_pin, alarm_blocked);
  (* src = "controlador.v:86" *)
  wire _000_;
  (* src = "controlador.v:86" *)
  wire _001_;
  (* src = "controlador.v:86" *)
  wire _002_;
  (* src = "controlador.v:86" *)
  wire [2:0] _003_;
  (* src = "controlador.v:86" *)
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  (* src = "controlador.v:11" *)
  output alarm_blocked;
  reg alarm_blocked;
  (* src = "controlador.v:10" *)
  output alarm_wrong_pin;
  reg alarm_wrong_pin;
  (* src = "controlador.v:2" *)
  input clk;
  (* src = "controlador.v:9" *)
  output close_gate;
  reg close_gate;
  (* src = "controlador.v:26" *)
  reg [2:0] counter;
  (* src = "controlador.v:8" *)
  output open_gate;
  reg open_gate;
  (* src = "controlador.v:7" *)
  input [15:0] password_input;
  (* src = "controlador.v:3" *)
  input rst;
  (* src = "controlador.v:5" *)
  input sensor_moved_vehicule;
  (* src = "controlador.v:4" *)
  input sensor_vehicule;
  (* onehot = 32'd1 *)
  reg [6:0] state;
  NOT _063_ (
    .A(state[1]),
    .Y(_016_)
  );
  NOT _064_ (
    .A(state[6]),
    .Y(_017_)
  );
  NOT _065_ (
    .A(state[3]),
    .Y(_018_)
  );
  NOT _066_ (
    .A(state[5]),
    .Y(_019_)
  );
  NOT _067_ (
    .A(counter[1]),
    .Y(_020_)
  );
  NOT _068_ (
    .A(counter[0]),
    .Y(_021_)
  );
  NOT _069_ (
    .A(sensor_moved_vehicule),
    .Y(_022_)
  );
  NOT _070_ (
    .A(sensor_vehicule),
    .Y(_023_)
  );
  NOT _071_ (
    .A(state[2]),
    .Y(_024_)
  );
  NAND _072_ (
    .A(state[6]),
    .B(_022_),
    .Y(_025_)
  );
  NOR _073_ (
    .A(password_input[7]),
    .B(password_input[11]),
    .Y(_026_)
  );
  NOR _074_ (
    .A(password_input[14]),
    .B(password_input[15]),
    .Y(_027_)
  );
  NAND _075_ (
    .A(_026_),
    .B(_027_),
    .Y(_028_)
  );
  NOR _076_ (
    .A(password_input[1]),
    .B(password_input[2]),
    .Y(_029_)
  );
  NOR _077_ (
    .A(password_input[3]),
    .B(password_input[4]),
    .Y(_030_)
  );
  NAND _078_ (
    .A(_029_),
    .B(_030_),
    .Y(_031_)
  );
  NOR _079_ (
    .A(_028_),
    .B(_031_),
    .Y(_032_)
  );
  NOT _080_ (
    .A(_032_),
    .Y(_033_)
  );
  NAND _081_ (
    .A(password_input[9]),
    .B(password_input[10]),
    .Y(_034_)
  );
  NAND _082_ (
    .A(password_input[12]),
    .B(password_input[13]),
    .Y(_035_)
  );
  NOR _083_ (
    .A(_034_),
    .B(_035_),
    .Y(_036_)
  );
  NAND _084_ (
    .A(password_input[0]),
    .B(password_input[5]),
    .Y(_037_)
  );
  NAND _085_ (
    .A(password_input[6]),
    .B(password_input[8]),
    .Y(_038_)
  );
  NOR _086_ (
    .A(_037_),
    .B(_038_),
    .Y(_039_)
  );
  NAND _087_ (
    .A(_036_),
    .B(_039_),
    .Y(_040_)
  );
  NOR _088_ (
    .A(_033_),
    .B(_040_),
    .Y(_041_)
  );
  NAND _089_ (
    .A(state[2]),
    .B(_041_),
    .Y(_042_)
  );
  NAND _090_ (
    .A(_025_),
    .B(_042_),
    .Y(_010_)
  );
  NAND _091_ (
    .A(state[0]),
    .B(sensor_vehicule),
    .Y(_043_)
  );
  NOR _092_ (
    .A(_020_),
    .B(_021_),
    .Y(_044_)
  );
  NOR _093_ (
    .A(counter[2]),
    .B(_044_),
    .Y(_045_)
  );
  NAND _094_ (
    .A(state[5]),
    .B(_045_),
    .Y(_046_)
  );
  NAND _095_ (
    .A(_043_),
    .B(_046_),
    .Y(_009_)
  );
  NAND _096_ (
    .A(state[0]),
    .B(_023_),
    .Y(_047_)
  );
  NOR _097_ (
    .A(state[1]),
    .B(state[0]),
    .Y(_048_)
  );
  NAND _098_ (
    .A(_016_),
    .B(_047_),
    .Y(_007_)
  );
  NOR _099_ (
    .A(_019_),
    .B(_045_),
    .Y(_049_)
  );
  NOR _100_ (
    .A(state[3]),
    .B(_049_),
    .Y(_050_)
  );
  NOT _101_ (
    .A(_050_),
    .Y(_008_)
  );
  NOR _102_ (
    .A(state[0]),
    .B(state[5]),
    .Y(_051_)
  );
  NAND _103_ (
    .A(counter[0]),
    .B(_051_),
    .Y(_052_)
  );
  NAND _104_ (
    .A(state[5]),
    .B(_021_),
    .Y(_053_)
  );
  NAND _105_ (
    .A(_052_),
    .B(_053_),
    .Y(_003_[0])
  );
  NAND _106_ (
    .A(_020_),
    .B(_021_),
    .Y(_054_)
  );
  NAND _107_ (
    .A(counter[1]),
    .B(_051_),
    .Y(_055_)
  );
  NOR _108_ (
    .A(_019_),
    .B(_044_),
    .Y(_056_)
  );
  NAND _109_ (
    .A(_054_),
    .B(_056_),
    .Y(_057_)
  );
  NAND _110_ (
    .A(_055_),
    .B(_057_),
    .Y(_003_[1])
  );
  NAND _111_ (
    .A(counter[2]),
    .B(_051_),
    .Y(_058_)
  );
  NAND _112_ (
    .A(counter[2]),
    .B(_044_),
    .Y(_059_)
  );
  NAND _113_ (
    .A(_049_),
    .B(_059_),
    .Y(_060_)
  );
  NAND _114_ (
    .A(_058_),
    .B(_060_),
    .Y(_003_[2])
  );
  NAND _115_ (
    .A(open_gate),
    .B(_048_),
    .Y(_061_)
  );
  NAND _116_ (
    .A(_017_),
    .B(_061_),
    .Y(_004_)
  );
  NOR _117_ (
    .A(state[0]),
    .B(state[6]),
    .Y(_062_)
  );
  NAND _118_ (
    .A(alarm_blocked),
    .B(_062_),
    .Y(_011_)
  );
  NAND _119_ (
    .A(_018_),
    .B(_011_),
    .Y(_000_)
  );
  NOR _120_ (
    .A(state[5]),
    .B(_062_),
    .Y(_012_)
  );
  NOR _121_ (
    .A(alarm_wrong_pin),
    .B(_049_),
    .Y(_013_)
  );
  NOR _122_ (
    .A(_012_),
    .B(_013_),
    .Y(_001_)
  );
  NAND _123_ (
    .A(close_gate),
    .B(_062_),
    .Y(_014_)
  );
  NAND _124_ (
    .A(_016_),
    .B(_014_),
    .Y(_002_)
  );
  NAND _125_ (
    .A(state[6]),
    .B(sensor_moved_vehicule),
    .Y(_015_)
  );
  NOT _126_ (
    .A(_015_),
    .Y(_005_)
  );
  NOR _127_ (
    .A(_024_),
    .B(_041_),
    .Y(_006_)
  );
  always @(posedge clk or posedge rst)
    if (rst)
      state[0] <= 1;
    else
      state[0] <= _007_;
  always @(posedge clk or posedge rst)
    if (rst)
      state[1] <= 0;
    else
      state[1] <= _005_;
  always @(posedge clk or posedge rst)
    if (rst)
      state[2] <= 0;
    else
      state[2] <= state[4];
  always @(posedge clk or posedge rst)
    if (rst)
      state[3] <= 0;
    else
      state[3] <= _008_;
  always @(posedge clk or posedge rst)
    if (rst)
      state[4] <= 0;
    else
      state[4] <= _009_;
  always @(posedge clk or posedge rst)
    if (rst)
      state[5] <= 0;
    else
      state[5] <= _006_;
  always @(posedge clk or posedge rst)
    if (rst)
      state[6] <= 0;
    else
      state[6] <= _010_;
  (* src = "controlador.v:86" *)
  always @(posedge clk or posedge rst)
    if (rst)
      close_gate <= 0;
    else
      close_gate <= _002_;
  (* src = "controlador.v:86" *)
  always @(posedge clk or posedge rst)
    if (rst)
      alarm_wrong_pin <= 0;
    else
      alarm_wrong_pin <= _001_;
  (* src = "controlador.v:86" *)
  always @(posedge clk or posedge rst)
    if (rst)
      alarm_blocked <= 0;
    else
      alarm_blocked <= _000_;
  (* src = "controlador.v:86" *)
  always @(posedge clk or posedge rst)
    if (rst)
      open_gate <= 0;
    else
      open_gate <= _004_;
  (* src = "controlador.v:86" *)
  always @(posedge clk or posedge rst)
    if (rst)
      counter[0] <= 0;
    else
      counter[0] <= _003_[0];
  (* src = "controlador.v:86" *)
  always @(posedge clk or posedge rst)
    if (rst)
      counter[1] <= 0;
    else
      counter[1] <= _003_[1];
  (* src = "controlador.v:86" *)
  always @(posedge clk or posedge rst)
    if (rst)
      counter[2] <= 0;
    else
      counter[2] <= _003_[2];
endmodule
